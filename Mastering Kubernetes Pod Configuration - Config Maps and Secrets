Description
Kubernetes provides a variety of features to get the most out of your containerized applications. This lab will train you on Pod configuration concepts that teach you how to separate configuration from container images to improve reusability and security.

Learning Objectives:

Understand ConfigMaps
Create & consume Secrets

Connecting to the Kubernetes Cluster:
=======================================
ntroduction
You will use a multi-node Kubernetes cluster to practice separating configuration data from container images to improve reusability in this lab. This lab provides you with a Kubernetes cluster initialized with kubeadm and running on Ubuntu. The cluster is similar to the clusters used in official CNCF Kubernetes certification exams. It has a bastion node for connecting to the Kubernetes cluster nodes that includes a single control-plane node. The infrastructure is deployed on AWS. You can log in to AWS using the lab credentials and Open Environment link when needed.

The following instructions connect to the cluster using a web browser terminal. You can also connect using your preferred SSH client rather than the browser terminal by using the PPK (Windows) or PEM (Mac/Linux) key files in the Credentials section of this lab to connect to the bastion host's IP address which appears below the credentials once it is available.

Note: The Open Environment link to the left takes you to AWS, while the Open Development Env. link takes you to the web terminal.

Instructions
1. Click Open Development Env. once you see 100% Setup completed:

This connects you to the browser terminal.

 

2. At the login prompt enter the following credentials:

login: Enter ca
Password: Press enter (no password)
You are then presented with the shell prompt:

3. Once you see Open Environment 100% Setup completed (It usually takes 1 minute from the time you start the lab):

Copy the Cluster SSH command that appears at the bottom of the lab Credentials panel:

ssh ubuntu@35.89.8.70 -oStrictHostKeyChecking=no

4. In the browser terminal, enter the Cluster SSH command at the prompt:

You are now connected to the bastion node in the cluster:

5. To ensure the cluster has one available worker node (ROLES set to <none>) before proceeding to use the cluster, enter the following command to watch the cluster come up and press ctrl+c to stop watching: 

watch kubectl get nodes

It usually takes 2 minutes from the time you start the lab to see a worker node join the cluster. You can proceed to the next step before seeing the worker node, but one worker node should be available before you start working with the cluster.

Note: You may see The connection to the server 10.0.0.100:6443 was refused - did you specify the right host or port? while the control plane's API server prepares to accept requests. It is not a problem and the control-plane node will appear before long.

Configuring Pods using Data Stored in ConfigMaps:
==================================================
ntroduction
ConfigMaps are a type of Kubernetes Resource that is used to decouple configuration artifacts from container image content to keep containerized applications portable. The configuration data is stored as key-value pairs. One ConfigMap may contain one or more key-value pairs. With kubectl, ConfigMaps can be created from:

Environment variable files consisting of key-value pairs separated by equal signs, e.g. key=value. The file should have one key-value pair per line.
Regular files or directories of files result in keys that are the names of the files and values that are the contents of the files.
Literals consisting of individual key-value pairs that you specify on the command line.
Writing a YAML manifest file of kind: ConfigMap.
ConfigMaps can be mounted into containers as volumes or as environment variables. Like most Kubernetes Resources, ConfigMaps are namespaced so only Pods in the same Namespace as a ConfigMap can use the ConfigMap.

In this Lab Step, you will see an example of how to create a ConfigMap from a literal key-value pair and mount the configuration data into a Pod using a volume.

Instructions
1. Create a Namespace for the resources you'll create in this Lab Step and change your default kubectl context to use the Namespace:

# Create namespace
kubectl create namespace configmaps
# Set namespace as the default for the current context
kubectl config set-context $(kubectl config current-context) --namespace=configmaps

2. Create a ConfigMap from two literal key-value pairs:

kubectl create configmap app-config --from-literal=DB_NAME=testdb \
  --from-literal=COLLECTION_NAME=messages

  3. Display the ConfigMap:

  kubectl get configmaps app-config -o yaml

  apiVersion: v1
data:
  COLLECTION_NAME: messages
  DB_NAME: testdb
kind: ConfigMap
metadata:
  creationTimestamp: "2022-06-26T07:33:20Z"
  name: app-config
  namespace: configmaps
  resourceVersion: "2447"
  uid: 5505c4e6-0e1e-49af-bcf4-471de541b58f

  This is also how you would declare an equivalent ConfigMap using a manifest file passed to kubectl create -f. 

  4. Create a Pod that mounts the ConfigMap using a volume:

  cat << 'EOF' > pod-configmap.yaml
apiVersion: v1
kind: Pod
metadata:
  name: db 
spec:
  containers:
  - image: mongo:4.0.6
    name: mongodb
    # Mount as volume 
    volumeMounts:
    - name: config
      mountPath: /config
    ports:
    - containerPort: 27017
      protocol: TCP
  volumes:
  - name: config
    # Declare the configMap to use for the volume
    configMap:
      name: app-config
EOF
kubectl create -f pod-configmap.yaml

The volume uses the configMap key to create a volume using a ConfigMap.

5. List the /config directory, where the ConfigMap volume is mounted, in the container:

kubectl exec db -it -- ls /config

The two ConfigMap keys are listed as files.

6. Get the contents of the DB_NAME file

kubectl exec db -it -- cat /config/DB_NAME && echo
testdb

The file content is the value of the corresponding ConfigMap key-value pair. The && echo is added simply to put the shell prompt onto a new line.

7. View more examples of creating ConfigMaps by entering:

kubectl create configmap --help | more

Create a configmap based on a file, directory, or specified literal value.

 A single configmap may package one or more key/value pairs.

 When creating a configmap based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename
 is an invalid key, you may specify an alternate key.

 When creating a configmap based on a directory, each file whose basename is a valid key in the directory will be packaged into the configmap.  Any directory 
entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).

Aliases:
configmap, cm

Examples:
  # Create a new configmap named my-config based on folder bar
  kubectl create configmap my-config --from-file=path/to/bar
  
  # Create a new configmap named my-config with specified keys instead of file basenames on disk
  kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt
  
  # Create a new configmap named my-config with key1=config1 and key2=config2
  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2
  
  # Create a new configmap named my-config from the key=value pairs in the file
  kubectl create configmap my-config --from-file=path/to/bar
  
  # Create a new configmap named my-config from an env file
  kubectl create configmap my-config --from-env-file=path/to/bar.env

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang a
nd jsonpath output formats.
      --append-hash=false: Append a hash of the configmap to its name.
      --dry-run='none': Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server str
ategy, submit server-side request without persisting the resource.

Summary
In this Lab Step, you created a ConfigMap and used it in a Pod by mounting it as a volume. ConfigMaps are useful for separating configuration from images to increase portability and reusability of container images. However, you should not store sensitive data in ConfigMaps. Instead, you should use Secrets, which are the topic of the next Lab Step.

You practiced using volumes to access ConfigMaps in Pods. To use a ConfigMap via Pod environment variables, you set the following field pod.spec.containers.envFrom.configMapRef (issue kubectl explain pod.spec.containers.envFrom.configMapRef for more details)

Storing and Accessing Sensitive Information Using Kubernetes Secrets:
=====================================================================
Introduction
Kubernetes provides Secrets as a way of storing sensitive data, such as passwords or API keys. Secrets reduce the risk of accidental exposure compared to if they were stored in an image or put in a Pod specification. Kubernetes supports storing Secrets as generic key-value pairs and also provides specialized support for TLS certificate secrets and Docker registry secrets used for pulling images from registries that require authentication. This lab step focuses on the generic variety of Secrets.

Secrets are very similar to ConfigMaps with the main difference being their intent, i.e. Secrets store sensitive information, and ConfigMaps should store configuration data. Secrets are not encrypted at rest by default and are instead only base-64 encoded. However, Kubernetes can separately control access to ConfigMaps and Secrets. So by following the pattern of storing sensitive data in Secrets, users of the cluster can be denied access to Secrets but granted access to ConfigMaps using Kubernetes access control mechanisms.

In this lab step, you will create a new secret and use it in a Pod through environment variables.

Instructions
1. Create a Namespace for the resources you'll create in this lab step and change your default kubectl context to use the Namespace:

# Create namespace
kubectl create namespace secrets
# Set namespace as the default for the current context
kubectl config set-context $(kubectl config current-context) --namespace=secrets

2. Use kubectl to create a Secret named app-secret:

kubectl create secret generic app-secret --from-literal=password=123457

The generic key-value pair Secret is assigned using the --from-literal option with an equal sign separating the key (password) from the value (123457). You can see kubectl create secret generic --help for other methods and examples for creating generic secrets.

 3. Get the YAML output for the Secret you created:

 kubectl get secret app-secret -o yaml

 apiVersion: v1
data:
  password: MTIzNDU3
kind: Secret
metadata:
  creationTimestamp: "2022-06-26T07:43:29Z"
  name: app-secret
  namespace: secrets
  resourceVersion: "3315"
  uid: d3a98739-3e02-437c-8717-f1e1e0c66f90
type: Opaque

The data field holds all of the key-value pairs. In this case, there is only one. The key password appears as expected, but the value (MTIzNDU3) is far from "123457". That is because secret values are base-64 encoded. 

Note: When you use kubectl create secret, the value is automatically encoded. If you use kubectl create -f, and specify a resource file, you need to encode the value yourself when setting the data: mapping. See the next instruction for how to achieve this. Alternatively, you can set a stringData: mapping instead which will perform the encoding for you. See kubectl explain secret for more details about the two options.

kubectl get secret app-secret -o jsonpath="{.data.password}" \
  | base64 --decode \
  && echo

  123457

  The base64 command can encode/decode strings. The --decode option must be specified to decode while the behavior with no options is to encode. The final echo is used to add a new line to the output so the shell prompt is on its own line.

  5. Create a Pod that uses the Secret through an environment variable:

cat << EOF > pod-secret.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: pod-secret
spec:
  containers:
  - image: busybox:1.30.1
    name: busybox
    args:
    - sleep
    - "3600"
    env:
    - name: PASSWORD      # Name of environment variable
      valueFrom:
        secretKeyRef:
          name: app-secret  # Name of secret
          key: password     # Name of secret key
EOF

kubectl create -f pod-secret.yaml

When using a secret through an environment variable, you must include valueFrom.secretKeyRef to specify the source of the environment variable.

6. Print the value of the environment variable in the Pod's container:

kubectl exec pod-secret -- /bin/sh -c 'echo $PASSWORD'

123457

Notice that the value is base-64 decoded automatically, so there is no need to use base64 --decode inside the container.

Summary
In this lab step, you learned about Kubernetes Secrets. You created a new Secret and accessed it inside of a container using an environment variable. You can also create secrets from files and mount Secrets using volumes just as you could with ConfigMaps.

